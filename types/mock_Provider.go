package types

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// AppCreate provides a mock function with given fields: name
func (_m *MockProvider) AppCreate(name string) (*App, error) {
	ret := _m.Called(name)

	var r0 *App
	if rf, ok := ret.Get(0).(func(string) *App); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*App)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppDelete provides a mock function with given fields: name
func (_m *MockProvider) AppDelete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppGet provides a mock function with given fields: name
func (_m *MockProvider) AppGet(name string) (*App, error) {
	ret := _m.Called(name)

	var r0 *App
	if rf, ok := ret.Get(0).(func(string) *App); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*App)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppList provides a mock function with given fields:
func (_m *MockProvider) AppList() (Apps, error) {
	ret := _m.Called()

	var r0 Apps
	if rf, ok := ret.Get(0).(func() Apps); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Apps)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppLogs provides a mock function with given fields: app, opts
func (_m *MockProvider) AppLogs(app string, opts LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(app, opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, LogsOptions) io.ReadCloser); ok {
		r0 = rf(app, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, LogsOptions) error); ok {
		r1 = rf(app, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppRegistry provides a mock function with given fields: app
func (_m *MockProvider) AppRegistry(app string) (*Registry, error) {
	ret := _m.Called(app)

	var r0 *Registry
	if rf, ok := ret.Get(0).(func(string) *Registry); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Registry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildCreate provides a mock function with given fields: app, url, opts
func (_m *MockProvider) BuildCreate(app string, url string, opts BuildCreateOptions) (*Build, error) {
	ret := _m.Called(app, url, opts)

	var r0 *Build
	if rf, ok := ret.Get(0).(func(string, string, BuildCreateOptions) *Build); ok {
		r0 = rf(app, url, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, BuildCreateOptions) error); ok {
		r1 = rf(app, url, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildGet provides a mock function with given fields: app, id
func (_m *MockProvider) BuildGet(app string, id string) (*Build, error) {
	ret := _m.Called(app, id)

	var r0 *Build
	if rf, ok := ret.Get(0).(func(string, string) *Build); ok {
		r0 = rf(app, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildList provides a mock function with given fields: app
func (_m *MockProvider) BuildList(app string) (Builds, error) {
	ret := _m.Called(app)

	var r0 Builds
	if rf, ok := ret.Get(0).(func(string) Builds); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Builds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildLogs provides a mock function with given fields: app, id
func (_m *MockProvider) BuildLogs(app string, id string) (io.ReadCloser, error) {
	ret := _m.Called(app, id)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(app, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildUpdate provides a mock function with given fields: app, id, opts
func (_m *MockProvider) BuildUpdate(app string, id string, opts BuildUpdateOptions) (*Build, error) {
	ret := _m.Called(app, id, opts)

	var r0 *Build
	if rf, ok := ret.Get(0).(func(string, string, BuildUpdateOptions) *Build); ok {
		r0 = rf(app, id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, BuildUpdateOptions) error); ok {
		r1 = rf(app, id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilesDelete provides a mock function with given fields: app, pid, files
func (_m *MockProvider) FilesDelete(app string, pid string, files []string) error {
	ret := _m.Called(app, pid, files)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(app, pid, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilesUpload provides a mock function with given fields: app, pid, r
func (_m *MockProvider) FilesUpload(app string, pid string, r io.Reader) error {
	ret := _m.Called(app, pid, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) error); ok {
		r0 = rf(app, pid, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyDecrypt provides a mock function with given fields: app, key, data
func (_m *MockProvider) KeyDecrypt(app string, key string, data []byte) ([]byte, error) {
	ret := _m.Called(app, key, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, []byte) []byte); ok {
		r0 = rf(app, key, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []byte) error); ok {
		r1 = rf(app, key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyEncrypt provides a mock function with given fields: app, key, data
func (_m *MockProvider) KeyEncrypt(app string, key string, data []byte) ([]byte, error) {
	ret := _m.Called(app, key, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, []byte) []byte); ok {
		r0 = rf(app, key, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []byte) error); ok {
		r1 = rf(app, key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectExists provides a mock function with given fields: app, key
func (_m *MockProvider) ObjectExists(app string, key string) (bool, error) {
	ret := _m.Called(app, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(app, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectFetch provides a mock function with given fields: app, key
func (_m *MockProvider) ObjectFetch(app string, key string) (io.ReadCloser, error) {
	ret := _m.Called(app, key)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(app, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectStore provides a mock function with given fields: app, key, r, opts
func (_m *MockProvider) ObjectStore(app string, key string, r io.Reader, opts ObjectStoreOptions) (*Object, error) {
	ret := _m.Called(app, key, r, opts)

	var r0 *Object
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, ObjectStoreOptions) *Object); ok {
		r0 = rf(app, key, r, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader, ObjectStoreOptions) error); ok {
		r1 = rf(app, key, r, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessExec provides a mock function with given fields: app, pid, command, opts
func (_m *MockProvider) ProcessExec(app string, pid string, command string, opts ProcessExecOptions) (int, error) {
	ret := _m.Called(app, pid, command, opts)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, string, ProcessExecOptions) int); ok {
		r0 = rf(app, pid, command, opts)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, ProcessExecOptions) error); ok {
		r1 = rf(app, pid, command, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessGet provides a mock function with given fields: app, pid
func (_m *MockProvider) ProcessGet(app string, pid string) (*Process, error) {
	ret := _m.Called(app, pid)

	var r0 *Process
	if rf, ok := ret.Get(0).(func(string, string) *Process); ok {
		r0 = rf(app, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Process)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessList provides a mock function with given fields: app, opts
func (_m *MockProvider) ProcessList(app string, opts ProcessListOptions) (Processes, error) {
	ret := _m.Called(app, opts)

	var r0 Processes
	if rf, ok := ret.Get(0).(func(string, ProcessListOptions) Processes); ok {
		r0 = rf(app, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Processes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ProcessListOptions) error); ok {
		r1 = rf(app, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessLogs provides a mock function with given fields: app, pid, opts
func (_m *MockProvider) ProcessLogs(app string, pid string, opts LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(app, pid, opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string, LogsOptions) io.ReadCloser); ok {
		r0 = rf(app, pid, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, LogsOptions) error); ok {
		r1 = rf(app, pid, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRun provides a mock function with given fields: app, opts
func (_m *MockProvider) ProcessRun(app string, opts ProcessRunOptions) (int, error) {
	ret := _m.Called(app, opts)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ProcessRunOptions) int); ok {
		r0 = rf(app, opts)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ProcessRunOptions) error); ok {
		r1 = rf(app, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessStart provides a mock function with given fields: app, opts
func (_m *MockProvider) ProcessStart(app string, opts ProcessRunOptions) (string, error) {
	ret := _m.Called(app, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ProcessRunOptions) string); ok {
		r0 = rf(app, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ProcessRunOptions) error); ok {
		r1 = rf(app, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessStop provides a mock function with given fields: app, pid
func (_m *MockProvider) ProcessStop(app string, pid string) error {
	ret := _m.Called(app, pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(app, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Proxy provides a mock function with given fields: app, pid, port, in
func (_m *MockProvider) Proxy(app string, pid string, port int, in io.Reader) (io.ReadCloser, error) {
	ret := _m.Called(app, pid, port, in)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string, int, io.Reader) io.ReadCloser); ok {
		r0 = rf(app, pid, port, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, io.Reader) error); ok {
		r1 = rf(app, pid, port, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueFetch provides a mock function with given fields: app, queue, opts
func (_m *MockProvider) QueueFetch(app string, queue string, opts QueueFetchOptions) (map[string]string, error) {
	ret := _m.Called(app, queue, opts)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, string, QueueFetchOptions) map[string]string); ok {
		r0 = rf(app, queue, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, QueueFetchOptions) error); ok {
		r1 = rf(app, queue, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueStore provides a mock function with given fields: app, queue, attrs
func (_m *MockProvider) QueueStore(app string, queue string, attrs map[string]string) error {
	ret := _m.Called(app, queue, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) error); ok {
		r0 = rf(app, queue, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryAdd provides a mock function with given fields: server, username, password
func (_m *MockProvider) RegistryAdd(server string, username string, password string) (*Registry, error) {
	ret := _m.Called(server, username, password)

	var r0 *Registry
	if rf, ok := ret.Get(0).(func(string, string, string) *Registry); ok {
		r0 = rf(server, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Registry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(server, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryList provides a mock function with given fields:
func (_m *MockProvider) RegistryList() (Registries, error) {
	ret := _m.Called()

	var r0 Registries
	if rf, ok := ret.Get(0).(func() Registries); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Registries)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRemove provides a mock function with given fields: server
func (_m *MockProvider) RegistryRemove(server string) error {
	ret := _m.Called(server)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseCreate provides a mock function with given fields: app, opts
func (_m *MockProvider) ReleaseCreate(app string, opts ReleaseCreateOptions) (*Release, error) {
	ret := _m.Called(app, opts)

	var r0 *Release
	if rf, ok := ret.Get(0).(func(string, ReleaseCreateOptions) *Release); ok {
		r0 = rf(app, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ReleaseCreateOptions) error); ok {
		r1 = rf(app, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseGet provides a mock function with given fields: app, id
func (_m *MockProvider) ReleaseGet(app string, id string) (*Release, error) {
	ret := _m.Called(app, id)

	var r0 *Release
	if rf, ok := ret.Get(0).(func(string, string) *Release); ok {
		r0 = rf(app, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseList provides a mock function with given fields: app, opts
func (_m *MockProvider) ReleaseList(app string, opts ReleaseListOptions) (Releases, error) {
	ret := _m.Called(app, opts)

	var r0 Releases
	if rf, ok := ret.Get(0).(func(string, ReleaseListOptions) Releases); ok {
		r0 = rf(app, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Releases)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ReleaseListOptions) error); ok {
		r1 = rf(app, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseLogs provides a mock function with given fields: app, id
func (_m *MockProvider) ReleaseLogs(app string, id string) (io.ReadCloser, error) {
	ret := _m.Called(app, id)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(app, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceList provides a mock function with given fields: app
func (_m *MockProvider) ResourceList(app string) (Resources, error) {
	ret := _m.Called(app)

	var r0 Resources
	if rf, ok := ret.Get(0).(func(string) Resources); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Resources)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList provides a mock function with given fields: app
func (_m *MockProvider) ServiceList(app string) (Services, error) {
	ret := _m.Called(app)

	var r0 Services
	if rf, ok := ret.Get(0).(func(string) Services); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Services)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGet provides a mock function with given fields:
func (_m *MockProvider) SystemGet() (*System, error) {
	ret := _m.Called()

	var r0 *System
	if rf, ok := ret.Get(0).(func() *System); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*System)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemInstall provides a mock function with given fields: name, opts
func (_m *MockProvider) SystemInstall(name string, opts SystemInstallOptions) (string, error) {
	ret := _m.Called(name, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, SystemInstallOptions) string); ok {
		r0 = rf(name, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, SystemInstallOptions) error); ok {
		r1 = rf(name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemLogs provides a mock function with given fields: opts
func (_m *MockProvider) SystemLogs(opts LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(LogsOptions) io.ReadCloser); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(LogsOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemUninstall provides a mock function with given fields: name, opts
func (_m *MockProvider) SystemUninstall(name string, opts SystemInstallOptions) error {
	ret := _m.Called(name, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, SystemInstallOptions) error); ok {
		r0 = rf(name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemUpdate provides a mock function with given fields: opts
func (_m *MockProvider) SystemUpdate(opts SystemUpdateOptions) error {
	ret := _m.Called(opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(SystemUpdateOptions) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TableGet provides a mock function with given fields: app, table
func (_m *MockProvider) TableGet(app string, table string) (*Table, error) {
	ret := _m.Called(app, table)

	var r0 *Table
	if rf, ok := ret.Get(0).(func(string, string) *Table); ok {
		r0 = rf(app, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(app, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableList provides a mock function with given fields: app
func (_m *MockProvider) TableList(app string) (Tables, error) {
	ret := _m.Called(app)

	var r0 Tables
	if rf, ok := ret.Get(0).(func(string) Tables); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Tables)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableQuery provides a mock function with given fields: app, table, query
func (_m *MockProvider) TableQuery(app string, table string, query string) (TableRows, error) {
	ret := _m.Called(app, table, query)

	var r0 TableRows
	if rf, ok := ret.Get(0).(func(string, string, string) TableRows); ok {
		r0 = rf(app, table, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TableRows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(app, table, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableTruncate provides a mock function with given fields: app, table
func (_m *MockProvider) TableTruncate(app string, table string) error {
	ret := _m.Called(app, table)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(app, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
