{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    {{ range .Manifest.Services }}
      "Endpoint{{ resource .Name }}": {
        "Value": {{ if .CDN }}
          { "Fn::GetAtt": [ "Service{{ resource .Name }}Cdn", "DomainName" ] }
        {{ else }}
          { "Fn::Sub": "{{ lower $.App.Name }}-{{ lower .Name }}.${Domain}" }
        {{ end }}
      },
    {{ end }}
    "Release": {
      "Value": "{{ .Release.Id }}"
    }
  },
  "Parameters": {
    "Domain": {
      "Type": "String",
      "Default": ""
    },
    "Password": {
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    },
    "Rack": {
      "MinLength": "1",
      "Type": "String"
    },
    "Role": {
      "Type": "String",
      "Default": ""
    }
  },
  "Resources": {
    {{ template "balancers" . }}
    {{ template "cdns" . }}
    {{ template "keys" . }}
    {{ template "queues" . }}
    {{ template "resources" . }}
    {{ template "services" . }}

    "Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "Builds": {
      "Type": "AWS::SDB::Domain",
      "Properties": {
        "Description": { "Fn::Sub": "${AWS::StackName} builds" }
      }
    },
    "Logs": {
      "Type": "AWS::Logs::LogGroup"
    },
    "Releases": {
      "Type": "AWS::SDB::Domain",
      "Properties": {
        "Description": { "Fn::Sub": "${AWS::StackName} releases" }
      }
    },
    "Repository": {
      "Type": "AWS::ECR::Repository",
      "DeletionPolicy": "Retain"
    }
  }
}

{{ define "balancers" }}
{{ end }}

{{ define "cdns" }}
  {{ range $s := .Manifest.Services }}
    {{ with .CDN }}
      "Service{{ resource $s.Name }}Certificate": {
        "Type": "AWS::CertificateManager::Certificate",
        "Properties": {
          "DomainName": "{{ . }}"
        }
      },
      "Service{{ resource $s.Name }}Cdn": {
        "Type": "AWS::CloudFront::Distribution",
        "Properties": {
          "DistributionConfig": {
            "Aliases": [ "{{ . }}" ],
            "Comment": { "Fn::Sub": "${AWS::StackName} {{ $s.Name }} cdn" },
            "DefaultCacheBehavior": {
              "AllowedMethods": ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"],
              "Compress": "true",
              "ForwardedValues": {
                "Cookies": { "Forward": "all" },
                "Headers": [ "*" ],
                "QueryString": "true"
              },
              "TargetOriginId": "default",
              "ViewerProtocolPolicy": "redirect-to-https"
            },
            "Enabled": "true",
            "Origins": [
              {
                "CustomOriginConfig": {
                  "HTTPSPort": "443",
                  "OriginProtocolPolicy": "https-only",
                  "OriginSSLProtocols": [ "TLSv1", "TLSv1.1", "TLSv1.2" ]
                },
                "DomainName": { "Fn::Sub": "{{ lower $.App.Name }}-{{ lower $s.Name }}.${Domain}" },
                "Id": "default"
              }
            ],
            "PriceClass": "PriceClass_100",
            "ViewerCertificate": {
              "AcmCertificateArn": { "Ref": "Service{{ resource $s.Name }}Certificate" },
              "SslSupportMethod": "sni-only"
            }
          }
        }
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "keys" }}
  {{ range .Manifest.Keys }}
    "Key{{ resource .Name }}": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "{{ $.App.Name }} {{ .Name }}",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "AWS": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:RackRole" } } },
            "Action": [ "kms:*" ],
            "Resource": "*"
          } ]
        }
      }
    },
    "Key{{ resource .Name }}Alias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": { "Fn::Sub": "alias/${AWS::StackName}-{{ .Name }}" },
        "TargetKeyId": { "Ref": "Key{{ resource .Name }}" }
      }
    },
  {{ end }}
{{ end }}

{{ define "queues" }}
  {{ range .Manifest.Queues }}
    "Queue{{ resource .Name }}": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "ReceiveMessageWaitTimeSeconds": "20"
      }
    },
  {{ end }}
{{ end }}

{{ define "resources" }}
  {{ range .Manifest.Resources }}
    "Resource{{ resource .Name }}": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Password": { "Fn::Base64": { "Fn::Select": [ 2, { "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] } },
          "Rack": { "Ref": "Rack" }
        },
        "Tags": [
          { "Key": "Name", "Value": "{{ .Name }}" },
          { "Key": "Rack", "Value": { "Ref": "Rack" } },
          { "Key": "Resource", "Value": "{{ .Type }}" },
          { "Key": "System", "Value": "convox" },
          { "Key": "Type", "Value": "resource" }
        ],
        "TemplateURL": { "Fn::Sub": "http://praxis-releases.s3.amazonaws.com/release/{{ $.Version }}/formation/resource/{{ .Type }}.json" }
      }
    },
  {{ end }}
{{ end }}

{{ define "services" }}
  {{ range $s := .Manifest.Services }}
    "Service{{ resource .Name }}": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Cluster" } },
        "DeploymentConfiguration": { "MinimumHealthyPercent": "50", "MaximumPercent": "200" },
        "DesiredCount": "{{ .Scale.Count.Min }}",
        {{ if .Port.Port }}
          "LoadBalancers": [ {
            "ContainerName": "{{ .Name }}",
            "ContainerPort": "{{ .Port.Port }}",
            "TargetGroupArn": { "Ref": "Service{{ resource .Name }}TargetGroup" }
          } ],
          "Role": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:ServiceRole" } },
        {{ end }}
        "TaskDefinition": { "Ref": "Service{{ resource .Name }}Tasks" }
      }
    },
    {{ if .Port.Port }}
      "Service{{ resource .Name }}ListenerRule": {
        "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
        "Properties": {
          "Actions": [ { "Type": "forward", "TargetGroupArn": { "Ref": "Service{{ resource .Name }}TargetGroup" } } ],
          "Conditions": [ { "Field": "host-header", "Values": [ { "Fn::Sub": "{{ lower $.App.Name }}-{{ lower .Name }}.${Domain}" } ] } ],
          "ListenerArn": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:BalancerListener" } },
          "Priority": "{{ priority $.App.Name .Name }}"
        }
      },
      {{ if .CDN }}
        "Service{{ resource .Name }}ListenerRuleCdnRaw": {
          "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
          "Properties": {
            "Actions": [ { "Type": "forward", "TargetGroupArn": { "Ref": "Service{{ resource .Name }}TargetGroup" } } ],
            "Conditions": [ { "Field": "host-header", "Values": [ { "Fn::GetAtt": [ "Service{{ resource .Name }}Cdn", "DomainName" ] } ] } ],
            "ListenerArn": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:BalancerListener" } },
            "Priority": "{{ priority $.App.Name (print .CDN "Raw") }}"
          }
        },
        "Service{{ resource .Name }}ListenerRuleCdnDomain": {
          "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
          "Properties": {
            "Actions": [ { "Type": "forward", "TargetGroupArn": { "Ref": "Service{{ resource .Name }}TargetGroup" } } ],
            "Conditions": [ { "Field": "host-header", "Values": [ "{{ .CDN }}" ] } ],
            "ListenerArn": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:BalancerListener" } },
            "Priority": "{{ priority $.App.Name (print .CDN "Domain") }}"
          }
        },
      {{ end }}
      "Service{{ resource .Name }}TargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "HealthCheckIntervalSeconds": {{ .Health.Interval }},
          "HealthCheckTimeoutSeconds": {{ .Health.Timeout }},
          "UnhealthyThresholdCount": 2,
          "HealthCheckPath": "{{ .Health.Path }}",
          "Port": "{{ .Port.Port }}",
          "Protocol": "{{ upper .Port.Scheme }}",
          "TargetGroupAttributes": [
            { "Key": "deregistration_delay.timeout_seconds", "Value": "5" },
            { "Key": "stickiness.enabled", "Value": "true" }
          ],
          "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Vpc" } }
        }
      },
    {{ end }}
    "Service{{ resource .Name }}Tasks": {
      "Type": "AWS::ECS::TaskDefinition",
      {{ if .Port.Port }}
        "DependsOn": "Service{{ resource .Name }}ListenerRule",
      {{ end }}
      "Properties": {
        "ContainerDefinitions": [ {
          {{ if .Command.Production }}
            "Command": [ "sh", "-c", "{{ .Command.Production }}" ],
          {{ end }}
          "DockerLabels": {
            "convox.app": "{{ $.App.Name }}",
            "convox.rack": { "Ref": "Rack" },
            "convox.release": "{{ $.Release.Id }}",
            "convox.service": "{{ .Name }}",
            "convox.type": "service"
          },
          "Environment": [
            { "Name": "APP", "Value": "{{ $.App.Name }}" },
            { "Name": "RACK_URL", "Value": { "Fn::Join": [ "", [
              { "Fn::Select": [ 0, { "Fn::Split": [ "//", { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Endpoint" } } ] } ] },
              "//",
              { "Ref": "Password" },
              "@",
              { "Fn::Select": [ 1, { "Fn::Split": [ "//", { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Endpoint" } } ] } ] }
            ] ] } },
            { "Name": "RELEASE", "Value": "{{ $.Release.Id }}" },
            {{ range .Resources }}
              { "Name": "{{ upper . }}_URL", "Value": { "Fn::GetAtt": [ "Resource{{resource . }}", "Outputs.Url" ] } },
            {{ end }}
            {{ range $k, $v := $.Env }}
              { "Name": "{{ $k }}", "Value": "{{ safe $v }}" },
            {{ end }}
            { "Ref": "AWS::NoValue" }
          ],
          "Essential": "true",
          "Image": { "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:{{ .Name }}.{{ $.Release.Build }}" },
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-region": { "Ref": "AWS::Region" },
              "awslogs-group": { "Ref": "Logs" },
              "awslogs-stream-prefix": "{{ $.App.Name }}"
            }
          },
          "Memory": "{{ .Scale.Memory }}",
          {{ with .Port.Port }}
            "PortMappings": [ { "ContainerPort": "{{ . }}", "Protocol": "tcp" } ],
          {{ end }}
          "Name": "{{ .Name }}"
        } ],
        "Family": { "Fn::Sub": "${AWS::StackName}-{{ .Name }}" },
        "TaskRoleArn": { "Ref": "Role" },
        "Volumes": [ { "Name": "docker", "Host": { "SourcePath": "/var/run/docker.sock" } } ]
      }
    },
  {{ end }}
{{ end }}
