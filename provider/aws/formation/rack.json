{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BlankInstanceKey": { "Fn::Equals": [ { "Ref": "InstanceKey" }, "" ] }
  },
  "Mappings": {
    "Constants": {
      "Values": {
        "Version": "latest"
      }
    },
    "RegionConfig": {
      "us-east-2": { "Ami": "ami-207b5a45" },
      "us-east-1": { "Ami": "ami-04351e12" },
      "us-west-2": { "Ami": "ami-57d9cd2e" },
      "us-west-1": { "Ami": "ami-7d664a1d" },
      "eu-west-2": { "Ami": "ami-ff15039b" },
      "eu-west-1": { "Ami": "ami-809f84e6" },
      "eu-central-1": { "Ami": "ami-a3a006cc" },
      "ap-northeast-1": { "Ami": "ami-e4657283" },
      "ap-southeast-2": { "Ami": "ami-42e9f921" },
      "ap-southeast-1": { "Ami": "ami-19f7787a" },
      "ca-central-1": { "Ami": "ami-3da81759" }
    }
  },
  "Outputs": {
    "Account" : {
      "Value": { "Ref": "AWS::AccountId" }
    },
    "BalancerListener": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:BalancerListener" } },
      "Value": { "Ref": "BalancerListener" }
    },
    "Cluster": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:Cluster" } },
      "Value": { "Ref": "RackCluster" }
    },
    "Domain": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:Domain" } },
      "Value": { "Fn::Join": [ "", [
        { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
        ".",
        { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
        ".rack.convox.io"
      ] ] }
    },
    "Endpoint": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:Endpoint" } },
      "Value": { "Fn::Join": [ "", [
        "https://rack.",
        { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
        ".",
        { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
        ".rack.convox.io"
      ] ] }
    },
    "RackRole": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:RackRole" } },
      "Value": { "Fn::GetAtt": [ "RackRole", "Arn" ] }
    },
    "ServiceRole": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:ServiceRole" } },
      "Value": { "Ref": "RackServiceRole" }
    },
    "Subnet0": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:Subnet0" } },
      "Value": { "Fn::GetAtt": [ "Network", "Outputs.Subnet0" ] }
    },
    "Subnet1": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:Subnet1" } },
      "Value": { "Fn::GetAtt": [ "Network", "Outputs.Subnet1" ] }
    },
    "Version": {
      "Value": { "Fn::FindInMap": [ "Constants", "Values", "Version" ] }
    },
    "Vpc": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:Vpc" } },
      "Value": { "Fn::GetAtt": [ "Network", "Outputs.Vpc" ] }
    },
    "VpcCidr": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:VpcCidr" } },
      "Value": { "Fn::GetAtt": [ "Network", "Outputs.Cidr" ] }
    },
    "VpcSubnet0": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:VpcSubnet0" } },
      "Value": { "Fn::GetAtt": [ "Network", "Outputs.Subnet0" ] }
    },
    "VpcSubnet1": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:VpcSubnet1" } },
      "Value": { "Fn::GetAtt": [ "Network", "Outputs.Subnet1" ] }
    }
  },
  "Parameters": {
    "InstanceCountMin": {
      "Default": "2",
      "Type": "Number"
    },
    "InstanceCountMax": {
      "Default": "10",
      "Type": "Number"
    },
    "InstanceKey": {
      "Default": "",
      "Type": "String"
    },
    "InstanceSize": {
      "Default": "t2.micro",
      "Type": "String"
    },
    "Password": {
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    }
  },
  "Resources": {
    "Network": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Sub": [
          "http://praxis-releases.s3.amazonaws.com/release/${Version}/formation/network.json",
          { "Version": { "Fn::FindInMap": [ "Constants", "Values", "Version" ] } }
        ] }
      }
    },
    "InstancesSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Sub": "${AWS::StackName} instances" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": { "Fn::GetAtt": [ "Network", "Outputs.Cidr" ] } },
          { "IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": { "Fn::GetAtt": [ "Network", "Outputs.Cidr" ] } }
        ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${AWS::StackName}-instances" } } ],
        "VpcId": { "Fn::GetAtt": [ "Network", "Outputs.Vpc" ] }
      }
    },
    "InstancesProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [ { "Ref": "InstancesRole" } ]
      }
    },
    "InstancesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ { "Effect": "Allow", "Principal": { "Service": [ "ec2.amazonaws.com" ] }, "Action": [ "sts:AssumeRole" ] } ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
          "arn:aws:iam::aws:policy/AutoScalingFullAccess"
        ]
      }
    },
    "InstancesConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "BlockDeviceMappings": [
          { "DeviceName": "/dev/xvdcz", "Ebs": { "VolumeSize": "200", "VolumeType":"gp2" } }
        ],
        "IamInstanceProfile": { "Ref": "InstancesProfile" },
        "ImageId": { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "Ami" ] },
        "InstanceMonitoring": true,
        "InstanceType": { "Ref": "InstanceSize" },
        "KeyName": { "Fn::If": [ "BlankInstanceKey", { "Ref": "AWS::NoValue" }, { "Ref": "InstanceKey" } ] },
        "PlacementTenancy" : "default",
        "SecurityGroups": [ { "Ref": "InstancesSecurity" } ],
        "UserData": { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#!/bin/bash -xe\n",
            "yum install -y aws-cfn-bootstrap aws-cli nfs-utils\n",
            "iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\n",
            "mkdir /volumes\n",
            "while true; do mount -t nfs -o nfsvers=4.1 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).", { "Ref": "Volumes" }, ".efs.", { "Ref": "AWS::Region" }, ".amazonaws.com:/ /volumes && break; sleep 5; done\n",
            "echo ECS_CLUSTER=", { "Ref": "RackCluster" }, " >> /etc/ecs/ecs.config\n",
            "echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n",
            "echo 'OPTIONS=\"${OPTIONS} --log-opt max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n",
            "service docker reload\n",
            "echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\n  copytruncate\\n}' >> /etc/logrotate.d/docker\n",
            "export INSTANCE_ID=$(curl -s --noproxy 169.254.169.254 http://169.254.169.254/latest/meta-data/instance-id)\n",
            "export ASG_NAME=$(/usr/bin/aws autoscaling describe-auto-scaling-instances --instance-ids=$INSTANCE_ID --region ", {"Ref":"AWS::Region"}, " --output text --query 'AutoScalingInstances[0].AutoScalingGroupName')\n",
            "export LIFECYCLE_HOOK=$(/usr/bin/aws autoscaling describe-lifecycle-hooks --auto-scaling-group-name $ASG_NAME --region ", {"Ref":"AWS::Region"}, " --output text --query \"LifecycleHooks[?contains(LifecycleHookName, '", { "Ref": "AWS::StackName" }, "-InstancesLifecycleLaunching') == \\`true\\`].LifecycleHookName | [0]\")\n",
            "if [[ \"$LIFECYCLE_HOOK\" != \"None\" ]]; then\n",
            "/usr/bin/aws autoscaling complete-lifecycle-action --region ", { "Ref": "AWS::Region" }, " --instance-id $INSTANCE_ID --lifecycle-hook-name $LIFECYCLE_HOOK --auto-scaling-group-name $ASG_NAME --lifecycle-action-result CONTINUE\n",
            "fi\n",
            "docker pull convox/golang\n",
            "docker pull convox/rails\n",
            "/opt/aws/bin/cfn-signal --stack ", { "Ref": "AWS::StackName" }, " --region ", { "Ref": "AWS::Region" }, " --resource Instances\n"
          ] ] }
        }
      }
    },
    "Instances": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "Cooldown": "180",
        "DesiredCapacity": { "Ref": "InstanceCountMin" },
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "120",
        "LaunchConfigurationName" : { "Ref": "InstancesConfig" },
        "MinSize" : { "Ref": "InstanceCountMin" },
        "MaxSize" : { "Ref": "InstanceCountMax" },
        "MetricsCollection": [ { "Granularity": "1Minute" } ],
        "Tags": [ { "Key": "Name", "Value": { "Ref": "AWS::StackName" }, "PropagateAtLaunch": "true" } ],
        "VPCZoneIdentifier": [
          { "Fn::GetAtt": [ "Network", "Outputs.Subnet0" ] },
          { "Fn::GetAtt": [ "Network", "Outputs.Subnet1" ] }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "2",
          "PauseTime" : "PT5M",
          "SuspendProcesses": [ "ScheduledActions" ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "InstancesLifecycleLaunching": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "Instances" },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": "600",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "NotificationTargetARN": { "Ref": "InstancesLifecycleTopic" },
        "RoleARN": { "Fn::GetAtt": [ "InstancesLifecycleRole", "Arn" ] }
      }
    },
    "InstancesLifecycleTerminating": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "Instances" },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": "300",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Ref": "InstancesLifecycleTopic" },
        "RoleARN": { "Fn::GetAtt": [ "InstancesLifecycleRole", "Arn" ] }
      }
    },
    "InstancesLifecycleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "autoscaling.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "InstancesLifecycleRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": { "Ref": "InstancesLifecycleTopic" }
                }
              ]
            }
          }
        ]
      }
    },
    "InstancesLifecycleTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Fn::GetAtt": [ "InstancesLifecycleHandler", "Arn" ] }, "Protocol": "lambda" } ],
        "TopicName" : { "Fn::Join": ["", [{"Ref":"AWS::StackName"}, "-lifecycle"]] }
      }
    },
    "InstancesLifecycleHandler": {
      "DependsOn": ["InstancesLifecycleHandlerRole"],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Fn::Sub": "praxis-releases-${AWS::Region}" },
          "S3Key": { "Fn::Sub": [
            "release/${Version}/lambda/lifecycle.zip",
            { "Version": { "Fn::FindInMap": [ "Constants", "Values", "Version" ] } } ]
          }
        },
        "Description": { "Fn::Join": [ "", [ "{\"Cluster\": \"", { "Ref": "RackCluster" }, "\", \"Rack\": \"", { "Ref": "AWS::StackName" }, "\"}" ] ] },
        "Handler": "index.external",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "InstancesLifecycleHandlerRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },
    "InstancesLifecycleHandlerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "InstancesLifecycleHandler", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": { "Ref": "InstancesLifecycleTopic" }
      }
    },
    "InstancesLifecycleHandlerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "InstancesLifecycleHandlerRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DescribeContainerInstances",
                    "ecs:DescribeServices",
                    "ecs:DescribeTasks",
                    "ecs:ListContainerInstances",
                    "ecs:ListServices",
                    "ecs:ListTasks",
                    "ecs:StopTask",
                    "ecs:UpdateContainerInstancesState",
                    "lambda:GetFunction",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "Volumes": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [ { "Key": "Name", "Value": { "Ref": "AWS::StackName" } } ]
      }
    },
    "VolumesSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Sub": "${AWS::StackName} volumes" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "2049", "ToPort": "2049", "CidrIp": { "Fn::GetAtt": [ "Network", "Outputs.Cidr" ] } }
        ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${AWS::StackName}-volumes" } } ],
        "VpcId": { "Fn::GetAtt": [ "Network", "Outputs.Vpc" ] }
      }
    },
    "VolumesTarget0": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "Volumes" },
        "SubnetId": { "Fn::GetAtt": [ "Network", "Outputs.Subnet0" ] },
        "SecurityGroups": [ { "Ref": "VolumesSecurity" } ]
      }
    },
    "VolumesTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "Volumes" },
        "SubnetId": { "Fn::GetAtt": [ "Network", "Outputs.Subnet1" ] },
        "SecurityGroups": [ { "Ref": "VolumesSecurity" } ]
      }
    },
    "BalancerCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": { "Fn::Join": [ ".", [
          "*",
          { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
          { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
          "rack.convox.io"
        ] ] },
        "DomainValidationOptions": [
          {
            "DomainName": { "Fn::Join": [ ".", [
              "*",
              { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
              { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Fn::GetAtt": [ "Balancer", "DNSName" ] } ] } ] },
              "rack.convox.io"
            ] ] },
            "ValidationDomain": "rack.convox.io"
          }
        ]
      }
    },
    "Balancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          { "Key" : "idle_timeout.timeout_seconds", "Value" : "1800" }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [ { "Ref": "BalancerSecurity" } ],
        "Subnets": [
          { "Fn::GetAtt": [ "Network", "Outputs.Subnet0" ] },
          { "Fn::GetAtt": [ "Network", "Outputs.Subnet1" ] }
        ]
      }
    },
    "BalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [ { "CertificateArn": { "Ref": "BalancerCertificate" } } ],
        "DefaultActions": [ { "Type": "forward", "TargetGroupArn": { "Ref": "BalancerTargetGroup" } } ],
        "LoadBalancerArn": { "Ref" : "Balancer" },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "BalancerSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Sub": "${AWS::StackName} balancer" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" }
        ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${AWS::StackName}-balancer" } } ],
        "VpcId": { "Fn::GetAtt": [ "Network", "Outputs.Vpc" ] }
      }
    },
    "BalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 60,
        "UnhealthyThresholdCount": 10,
        "HealthCheckPath": "/",
        "Port": "3000",
        "Protocol": "HTTPS",
        "TargetGroupAttributes": [
          { "Key": "deregistration_delay.timeout_seconds", "Value": "2" },
          { "Key": "stickiness.enabled", "Value": "true" }
        ],
        "VpcId": { "Fn::GetAtt": [ "Network", "Outputs.Vpc" ] }
      }
    },
    "NotificationQueue": {
      "Type": "AWS::SQS::Queue"
    },
    "NotificationQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [ { "Ref": "NotificationQueue" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "AWS": "*" },
              "Action": "sqs:SendMessage",
              "Resource": { "Fn::GetAtt": [ "NotificationQueue", "Arn" ] },
              "Condition": { "ArnEquals": { "aws:SourceArn": { "Ref": "NotificationTopic" } } }
            }
          ]
        }
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": { "Fn::Sub": "${AWS::StackName}-events" },
        "Subscription": [
          { "Protocol": "sqs", "Endpoint": { "Fn::GetAtt": [ "NotificationQueue", "Arn" ] } }
        ]
      }
    },
    "RackCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "RackLogs": {
      "Type": "AWS::Logs::LogGroup"
    },
    "RackRegistries": {
      "Type": "AWS::SDB::Domain",
      "Properties": {
        "Description": { "Fn::Sub": "${AWS::StackName} registries" }
      }
    },
    "RackRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ { "Effect": "Allow", "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ] }, "Action": [ "sts:AssumeRole" ] } ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ]
      }
    },
    "RackServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ { "Effect": "Allow", "Principal": { "Service": [ "ecs.amazonaws.com" ] }, "Action": [ "sts:AssumeRole" ] } ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
        ]
      }
    },
    "RackService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [ "BalancerListener", "Instances" ],
      "Properties": {
        "Cluster": { "Ref": "RackCluster" },
        "DeploymentConfiguration": { "MinimumHealthyPercent": "50", "MaximumPercent": "200" },
        "DesiredCount": "2",
        "LoadBalancers": [ { "ContainerName": "rack", "ContainerPort": "3000", "TargetGroupArn": { "Ref": "BalancerTargetGroup" } } ],
        "PlacementConstraints" : [{"Type": "distinctInstance"}],
        "PlacementStrategies": [
          { "Type": "spread", "Field": "attribute:ecs.availability-zone" },
          { "Type": "spread", "Field": "instanceId" }
        ],
        "Role": { "Ref": "RackServiceRole" },
        "TaskDefinition": { "Ref": "RackTasks" }
      }
    },
    "RackTasks": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [ "bin/rack" ],
            "Cpu": "32",
            "DockerLabels": {
              "convox.rack": { "Ref": "AWS::StackName" },
              "convox.release": { "Fn::FindInMap": [ "Constants", "Values", "Version" ] },
              "convox.service": "rack",
              "convox.type": "service"
            },
            "Environment": [
              { "Name": "AWS_REGION", "Value": { "Ref": "AWS::Region" } },
              { "Name": "NAME", "Value": { "Ref": "AWS::StackName"} },
              { "Name": "PASSWORD", "Value": { "Ref": "Password" } },
              { "Name": "PROVIDER", "Value": "aws" },
              { "Name": "VERSION", "Value": { "Fn::FindInMap": [ "Constants", "Values", "Version" ] } }
            ],
            "Essential": "true",
            "Image": { "Fn::Sub": [
              "convox/praxis:${Version}",
              { "Version": { "Fn::FindInMap": [ "Constants", "Values", "Version" ] } }
            ] },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-region": { "Ref": "AWS::Region" },
                "awslogs-group": { "Ref": "RackLogs" },
                "awslogs-stream-prefix": "rack"
              }
            },
            "MemoryReservation": "64",
            "MountPoints": [ { "SourceVolume": "docker", "ContainerPath": "/var/run/docker.sock" } ],
            "Name": "rack",
            "PortMappings": [ { "ContainerPort": "3000", "Protocol": "tcp" } ]
          }
        ],
        "Family": { "Fn::Sub": "${AWS::StackName}-rack" },
        "TaskRoleArn": { "Ref": "RackRole" },
        "Volumes": [ { "Name": "docker", "Host": { "SourcePath": "/var/run/docker.sock" } } ]
      }
    }
  }
}
